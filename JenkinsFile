pipeline {
    agent any
    environment {
        GIT_REPO = 'https://github.com/Shirisha1516/flask-app.git'
        BRANCH = 'main'
        DOCKER_IMAGE = "image-registry.openshift-image-registry.svc:5000/shireesha1516-dev/flask-app:latest"
        OPENSHIFT_PROJECT = 'shireesha1516-dev'
    }
    stages {
        stage('Clone Repository') {
            steps {
                // Clones the specified branch of the repository
                git branch: "${env.BRANCH}", url: "${env.GIT_REPO}"
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    // Create a virtual environment and install dependencies
                    sh 'python3 -m venv venv'
                    sh './venv/bin/pip install -r requirements.txt'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image using Dockerfile in the repository
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        // stage('Push Docker Image') {
        //     steps {
        //         script {
        //             // Log in to the OpenShift internal registry and push the image
        //             sh 'oc login --token=<your-openshift-token> --server=<openshift-api-server>'
        //             sh "docker push ${DOCKER_IMAGE}"
        //         }
        //     }
        // }

        stage('Deploy to OpenShift') {
            steps {
                script {
                    // Deploy or update the application in OpenShift
                    sh "oc project ${OPENSHIFT_PROJECT}"
                    sh "oc set image deployment/flask-app flask-app=${DOCKER_IMAGE} --record"
                    sh "oc rollout restart deployment/flask-app"
                }
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for more details.'
        }
    }
}
