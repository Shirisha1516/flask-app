pipeline {
    agent any

    environment {
        APP_NAME = 'sample-flask-app'
        BASE_IMAGE = 'python:3.8-ubi8'
        GIT_URL = 'https://github.com/Shirisha1516/flask-app.git' // Replace with your Flask app's GitHub URL
        GIT_BRANCH = 'main'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: env.GIT_BRANCH, url: env.GIT_URL
            }
        }

        stage('Prepare Dependencies') {
            steps {
                script {
                    // Create a virtual environment and install dependencies
                    sh 'python3 -m venv venv'
                    sh './venv/bin/pip install -r requirements.txt'
                }
            }
        }

        stage('Create Image Builder') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject() {
                            return !openshift.selector("bc", env.APP_NAME).exists();
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.newBuild("--name=${env.APP_NAME}", "--image-stream=${env.BASE_IMAGE}", "--binary=true")
                        }
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                sh "rm -rf ocp && mkdir -p ocp/deployments"
                sh "cp -R . ocp/deployments"

                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshift.selector("bc", env.APP_NAME).startBuild("--from-dir=./ocp", "--follow", "--wait=true")
                        }
                    }
                }
            }
        }

        stage('Deploy Application') {
            when {
                expression {
                    openshift.withCluster() {
                        openshift.withProject() {
                            return !openshift.selector('dc', env.APP_NAME).exists();
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            def app = openshift.newApp(env.APP_NAME, "--as-deployment-config")
                            app.narrow("svc").expose();
                        }
                    }
                }
            }
        }
    }
}
